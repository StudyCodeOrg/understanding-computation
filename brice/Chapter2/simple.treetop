
grammar Simple
  rule program
    first:(statement / expression) rest:(space? (";" / "\n") space? item:(statement / expression))*
    {
      def to_ast
        items = [first] + rest.elements.map {|xs| xs.item}
        if items.empty?
          nil
        elsif items.size > 1
          Sequence.new(*items.map{|e| e.to_ast})
        else
          items.first.to_ast
        end
      end
    }
  end

  rule statement
    assignment
  end

  rule expression
    variable / number
  end

  rule space
    [\s]+
  end

  rule assignment
    variable space* "=" space* expression {
      def to_ast
        Assign.new(elements.first.text_value.to_sym, elements.last.to_ast)
      end
    }
  end

  rule variable
    [a-zA-Z] [a-zA-Z0-9_]*
    {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule number
    [-]? [0-9]+ ([\.] [0-9]+)?
    {
      def to_ast
        Number.new(text_value.to_f)
      end
    }
  end
end
