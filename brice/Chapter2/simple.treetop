
grammar Simple
  rule program
    first:(statement / expression) rest:(space? (";" / "\n") space? item:(statement / expression))*
    {
      def to_ast
        items = [first] + rest.elements.map {|xs| xs.item}
        if items.empty?
          nil
        elsif items.size > 1
          Sequence.new(*items.map{|e| e.to_ast})
        else
          items.first.to_ast
        end
      end
    }
  end

  rule statement
    assignment
  end

  rule expression
    comparison / addition / multiplication / number / boolean / variable
  end

  rule boolean
    True / False
  end

  rule True
    "true"
    {
      def to_ast
        Boolean.new(true)
      end
    }
  end

  rule False
    "false"
    {
      def to_ast
        Boolean.new(false)
      end
    }
  end

  rule comparator
    "<"
    {
      def to_ast
        {"<"=>LessThan}[text_value]
      end
    }
  end

  rule space
    [\s]+
  end

  rule comparison
    a:number space* comparator space* b:number
    {
      def to_ast
        comparator.to_ast.new(a.to_ast, b.to_ast)
      end
    }
  end


  rule addition
    a:number space* "+" space* b:number
    {
      def to_ast
        Add.new(a.to_ast, b.to_ast)
      end
    }
  end

  rule multiplication
    a:number space* "*" space* b:number
    {
      def to_ast
        Multiply.new(a.to_ast, b.to_ast)
      end
    }
  end

  rule assignment
    name:variable space* "=" space* exp:expression {
      def to_ast
        Assign.new(name.text_value.to_sym, exp.to_ast)
      end
    }
  end

  rule variable
    [a-zA-Z] [a-zA-Z0-9_]*
    {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule number
    [-]? [0-9]+ ([\.] [0-9]+)?
    {
      def to_ast
        Number.new(text_value.to_f)
      end
    }
  end
end
