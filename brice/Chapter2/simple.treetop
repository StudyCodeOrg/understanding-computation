
grammar Simple
  rule program
    sequence
  end

  rule sequence
    space? first:(statement / expression)
    rest:(space? ";" space? item:(statement / expression))*
    space? ";"? space?
    {
      def to_ast
        items = [first] + rest.elements.map {|xs| xs.item}
        if items.empty?
          nil
        elsif items.size > 1
          Sequence.new(*items.map{|e| e.to_ast})
        else
          items.first.to_ast
        end
      end
    }
  end

  rule statement
    If / While / assignment
  end

  rule If
    "if" space? "(" space? condition:expression space? ")" space?
    "{" space? consequence:sequence space? "}"
    alternative:(space? "else" space? "{" space? body:sequence space? "}")?
    {
      def to_ast
        if (defined? alternative.body).nil?
          If.new(condition.to_ast, consequence.to_ast, Noop.new)
        else
          If.new(condition.to_ast, consequence.to_ast, alternative.body.to_ast)
        end
      end
    }
  end

  rule While
    "while" space? "(" space? condition:expression space? ")" space?
    "{" space? body:sequence space? "}"
    {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule expression
    comparison / addition / multiplication / number / boolean / variable
  end

  rule boolean
    True / False
  end

  rule True
    "true"
    {
      def to_ast
        Boolean.new(true)
      end
    }
  end

  rule False
    "false"
    {
      def to_ast
        Boolean.new(false)
      end
    }
  end

  rule comparator
    "<"
    {
      def to_ast
        {"<"=>LessThan}[text_value]
      end
    }
  end

  rule space
    [\s]+
  end

  rule comparison
    a:(number / variable) space? comparator space? b:(number / variable)
    {
      def to_ast
        comparator.to_ast.new(a.to_ast, b.to_ast)
      end
    }
  end


  rule addition
    a:(number / variable) space? "+" space? b:(number / variable)
    {
      def to_ast
        Add.new(a.to_ast, b.to_ast)
      end
    }
  end

  rule multiplication
    a:(number / variable) space? "*" space? b:(number / variable)
    {
      def to_ast
        Multiply.new(a.to_ast, b.to_ast)
      end
    }
  end

  rule assignment
    name:variable space? "=" space? exp:expression {
      def to_ast
        Assign.new(name.text_value.to_sym, exp.to_ast)
      end
    }
  end

  rule variable
    [a-zA-Z] [a-zA-Z0-9_]*
    {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule integer
    [-]? [0-9]+
    {
      def to_value
        text_value.to_i
      end
    }
  end

  rule decimal
    [-]? [0-9]+ "." [0-9]+
    {
      def to_value
        text_value.to_f
      end
    }
  end

  rule number
    a:(decimal / integer)
    {
      def to_ast
        Number.new(a.to_value)
      end
    }
  end
end
